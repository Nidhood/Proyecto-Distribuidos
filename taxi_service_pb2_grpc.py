# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import taxi_service_pb2 as taxi__service__pb2

GRPC_GENERATED_VERSION = '1.67.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in taxi_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TaxiDatabaseServiceStub(object):
    """Servicios principales
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HealthCheck = channel.unary_unary(
                '/taxi_service.TaxiDatabaseService/HealthCheck',
                request_serializer=taxi__service__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=taxi__service__pb2.HealthCheckResponse.FromString,
                _registered_method=True)
        self.RegisterTaxi = channel.unary_unary(
                '/taxi_service.TaxiDatabaseService/RegisterTaxi',
                request_serializer=taxi__service__pb2.RegisterTaxiRequest.SerializeToString,
                response_deserializer=taxi__service__pb2.RegisterTaxiResponse.FromString,
                _registered_method=True)
        self.UpdateTaxiPosition = channel.unary_unary(
                '/taxi_service.TaxiDatabaseService/UpdateTaxiPosition',
                request_serializer=taxi__service__pb2.UpdateTaxiPositionRequest.SerializeToString,
                response_deserializer=taxi__service__pb2.UpdateTaxiPositionResponse.FromString,
                _registered_method=True)
        self.CreateService = channel.unary_unary(
                '/taxi_service.TaxiDatabaseService/CreateService',
                request_serializer=taxi__service__pb2.CreateServiceRequest.SerializeToString,
                response_deserializer=taxi__service__pb2.CreateServiceResponse.FromString,
                _registered_method=True)
        self.GetStatistics = channel.unary_unary(
                '/taxi_service.TaxiDatabaseService/GetStatistics',
                request_serializer=taxi__service__pb2.GetStatisticsRequest.SerializeToString,
                response_deserializer=taxi__service__pb2.GetStatisticsResponse.FromString,
                _registered_method=True)
        self.GetAvailableTaxis = channel.unary_stream(
                '/taxi_service.TaxiDatabaseService/GetAvailableTaxis',
                request_serializer=taxi__service__pb2.GetAvailableTaxisRequest.SerializeToString,
                response_deserializer=taxi__service__pb2.Taxi.FromString,
                _registered_method=True)


class TaxiDatabaseServiceServicer(object):
    """Servicios principales
    """

    def HealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterTaxi(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTaxiPosition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatistics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAvailableTaxis(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaxiDatabaseServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=taxi__service__pb2.HealthCheckRequest.FromString,
                    response_serializer=taxi__service__pb2.HealthCheckResponse.SerializeToString,
            ),
            'RegisterTaxi': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterTaxi,
                    request_deserializer=taxi__service__pb2.RegisterTaxiRequest.FromString,
                    response_serializer=taxi__service__pb2.RegisterTaxiResponse.SerializeToString,
            ),
            'UpdateTaxiPosition': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTaxiPosition,
                    request_deserializer=taxi__service__pb2.UpdateTaxiPositionRequest.FromString,
                    response_serializer=taxi__service__pb2.UpdateTaxiPositionResponse.SerializeToString,
            ),
            'CreateService': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateService,
                    request_deserializer=taxi__service__pb2.CreateServiceRequest.FromString,
                    response_serializer=taxi__service__pb2.CreateServiceResponse.SerializeToString,
            ),
            'GetStatistics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatistics,
                    request_deserializer=taxi__service__pb2.GetStatisticsRequest.FromString,
                    response_serializer=taxi__service__pb2.GetStatisticsResponse.SerializeToString,
            ),
            'GetAvailableTaxis': grpc.unary_stream_rpc_method_handler(
                    servicer.GetAvailableTaxis,
                    request_deserializer=taxi__service__pb2.GetAvailableTaxisRequest.FromString,
                    response_serializer=taxi__service__pb2.Taxi.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'taxi_service.TaxiDatabaseService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('taxi_service.TaxiDatabaseService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TaxiDatabaseService(object):
    """Servicios principales
    """

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taxi_service.TaxiDatabaseService/HealthCheck',
            taxi__service__pb2.HealthCheckRequest.SerializeToString,
            taxi__service__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterTaxi(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taxi_service.TaxiDatabaseService/RegisterTaxi',
            taxi__service__pb2.RegisterTaxiRequest.SerializeToString,
            taxi__service__pb2.RegisterTaxiResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateTaxiPosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taxi_service.TaxiDatabaseService/UpdateTaxiPosition',
            taxi__service__pb2.UpdateTaxiPositionRequest.SerializeToString,
            taxi__service__pb2.UpdateTaxiPositionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taxi_service.TaxiDatabaseService/CreateService',
            taxi__service__pb2.CreateServiceRequest.SerializeToString,
            taxi__service__pb2.CreateServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStatistics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taxi_service.TaxiDatabaseService/GetStatistics',
            taxi__service__pb2.GetStatisticsRequest.SerializeToString,
            taxi__service__pb2.GetStatisticsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAvailableTaxis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/taxi_service.TaxiDatabaseService/GetAvailableTaxis',
            taxi__service__pb2.GetAvailableTaxisRequest.SerializeToString,
            taxi__service__pb2.Taxi.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
